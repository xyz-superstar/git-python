进程线程的区别和联系

1、两者都是多任务编程的方式，都能使用计算机的多核资源
2、进程的创建删除消耗的计算机资源比线程多
3、进程空间独立，数据互不干扰，有专门的IPC，线程使用全局变量进行通信
4、一个进程可以创建多个线程分支，两者之间存在包含关系
5、多个线程公用进程的资源，在资源操作时往往需要同步互斥
6、进程线程在系统中都有自己特有的属性，ID,代码段，栈区等资源

使用场景
*需要创建较多并发，同时任务关联性比较强一般用多线程
*不同的任务模块可能更多使用进程
*使用进程线程需要考虑数据的处理复杂度，比如进程间通信是否方便，同步互斥是否过于复杂

要求：
1、进程线程的区别和联系
2、进程间通信方式都知道那些，有什么特点
3、同步互斥意义是什么，什么情况下用
4、给一个情形，分析使用进程还是用线程，理由
5、常见概念的挖掘：僵尸进程、进程状态、GIL


服务器模型

硬件服务器：主机  集群

厂商：IBM  HP   联想   浪潮

软件服务器：编写的服务端应用程序，在硬件服务器上运行，
一般依托于操作系统，给用户提供一套完整的服务。

httpserver   ----->>处理http请求
webserver    ----->>网站的后端应用服务器程序
邮箱服务器     ----->>邮件处理
ftp文件服务器  ----->>文件的上传下载

功能：网络连接 逻辑处理  数据交互   数据传输   协议的实现

结构：  C/S  客户服务器模型
	   b/s  浏览服务器模型
	   
服务器目标：处理速度更快，并发量更高，安全性更高
硬件：更高的配置，更好的集成分布技术，更好的网络优化和网络安全技术
软件：占用资源更少，运行更稳定，算法更优良，安全性更好，并发行更高，更容易扩展

基础的服务端模型

循环模型：循环接收客户端请求，处理请求。同一时刻只能处理一个请求，处理完毕后再
处理下一个。
	优点：实现简单，占用资源少
	缺点：无法同时处理多个客户端任务
	适用情况：处理的任务可以短时间完成，不需要建立并发，更适合udp使用。

并发模型：能够同时处理多个客户端请求。

	IO并发：IO多路复用
		优点：资源消耗少，IO处理速度快，
		缺点：不适用CPU密集型程序
		
	多进程/多线程并发：为每个客户创建单独的进程线程，执行请求
		优点：每个客户端可以长期占有服务器运行程序
			能够使用多核资源，可以处理IO或CPU运算
		缺点：消耗系统资源高
		
多进程并发模型

使用fork实现多进程并发
1、创建套接字，绑定监听
2、等待接收客户端请求
3、创建新的进程处理客户端请求
4、原进程继续等待新的客户端连接
5、如果客户端退出则关闭子进程

#在父进程中忽略子进程状态改变，子进程退出自动由系统处理
signal.signal(signal.SIGCHLD,signal.SIG_IGN)

ftp文件服务器
项目功能
*服务端和客户端两部分，要求启动一个服务端，处理多个客户段请求
*功能：1、可以查看服务端文件库中所有的普通文件
	  2、从客户端可以下载文件库的文件到本地
	  3、可以将本地文件上传到服务端文件库
	  4、退出
*客户端使用print在终端打印简单的命令提示，通过命令提示发起请求

分析步骤
1、技术分析：fork tcp 并发
2、每个功能单独封装，整体功能写在一个类中
如何打架整体架构，完成网络通讯

功能分析：
1、获取文件列表
	客户端：*		发送请求
				得到回复判断能否获取列表
				接收文件名称列表打印【粘包】
	服务端：*		接收请求
				判断请求类型
				判断能否满足请求，回复信息确认
				执行请求，发送文件列表

cookie：os.lisdir(path)查看路径下的所有文件
os.path.isfile('文件名')判断是否普通文件
os.path.isdir('文件名')判断是否为目录

2、文件下载
  客户端：*发送请求（文件名）
		*得到回复判断能否下载
		*下载文件
  服务端：		接收请求
				判断请求类型
				判断能否满足请求，回复信息确认
				执行请求，发送文件

作业：
1、完成文件服务器的上传功能
2、复习HTTP协议和httpserver第一版
3、进程线程网络总结，难点程序再写一遍（IO多路复用）












